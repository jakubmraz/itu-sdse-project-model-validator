# action.yml
name: 'Run Model Inference Test'
description: 'Downloads model artifact and runs inference test on it.'
inputs:
  model_password:
    description: '[OPTIONAL] Password to decrypt the model file. Only used for verifying the action and logic itself.'
    required: false
    default: ''
outputs: {}
runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.7
      with:
        repository: lasselundstenjensen/itu-sdse-project-model-validator
        clean: true

    - name: Download model artifact
      uses: actions/download-artifact@v4.1.8
      with:
        name: model
        path: model

    - name: Decrypt model artifact if a password is provided
      if: ${{ inputs.model_password != '' }}
      run: |
        openssl aes-256-cbc -d -in model/model.pkl.enc -out model/model.pkl -pass pass:${{ inputs.model_password }}
      shell: bash

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install scikit-learn pandas joblib
      shell: bash

    - name: Run inference test
      run: |
        import sklearn
        import pandas as pd
        import joblib
        import numpy as np

        # Load the downloaded model
        with open("model/model.pkl", "rb") as f:
            model = joblib.load(f)

        # Load the test data
        X = pd.read_csv("test/dataset/X_test.csv")
        y = pd.read_csv("test/dataset/y_test.csv")

        # Make predictions
        y_pred = model.predict(X.head(5))
        y_true = y.head(5).values.flatten()

        # Print outputs
        print("Predicted:", y_pred)
        print("Actual:", y_true)

        # Define expected outputs
        expected_pred = np.array([0., 1., 0., 1., 0.])
        expected_y = np.array([0., 1., 0., 1., 0.])

        # Compare predicted outputs
        if not np.array_equal(y_pred, expected_pred):
            print("❌ Predicted values do not match expected values!")
            exit(1)

        # Compare actual outputs
        if not np.array_equal(y_true, expected_y):
            print("❌ Actual values do not match expected values!")
            exit(1)

        print("✅ Inference output matches the expected output.")
      shell: python
